{"version":3,"file":"static/js/449.ce0b9977.chunk.js","mappings":"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","sources":["../node_modules/base-x/src/index.js","../node_modules/bigint-buffer/dist/browser.js","../node_modules/bs58/index.js","../node_modules/jayson/lib/client/browser/index.js","../node_modules/jayson/lib/generateRequest.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../node_modules/superstruct/src/utils.ts","../node_modules/superstruct/src/error.ts","../node_modules/superstruct/src/struct.ts","../node_modules/superstruct/src/structs/utilities.ts","../node_modules/superstruct/src/structs/types.ts","../node_modules/@babel/runtime/helpers/esm/toArray.js","../node_modules/superstruct/src/structs/coercions.ts","../node_modules/text-encoding-utf-8/lib/encoding.lib.mjs"],"sourcesContent":["'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n","'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n","import defineProperty from \"./defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import { Struct, Infer, Result, Context, Describe } from './struct'\nimport { Failure } from './error'\n\n/**\n * Check if a value is an iterator.\n */\n\nfunction isIterable<T>(x: unknown): x is Iterable<T> {\n  return isObject(x) && typeof x[Symbol.iterator] === 'function'\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isObject(x: unknown): x is object {\n  return typeof x === 'object' && x != null\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isPlainObject(x: unknown): x is { [key: string]: any } {\n  if (Object.prototype.toString.call(x) !== '[object Object]') {\n    return false\n  }\n\n  const prototype = Object.getPrototypeOf(x)\n  return prototype === null || prototype === Object.prototype\n}\n\n/**\n * Return a value as a printable string.\n */\n\nexport function print(value: any): string {\n  return typeof value === 'string' ? JSON.stringify(value) : `${value}`\n}\n\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\n\nexport function shiftIterator<T>(input: Iterator<T>): T | undefined {\n  const { done, value } = input.next()\n  return done ? undefined : value\n}\n\n/**\n * Convert a single validation result to a failure.\n */\n\nexport function toFailure<T, S>(\n  result: string | boolean | Partial<Failure>,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): Failure | undefined {\n  if (result === true) {\n    return\n  } else if (result === false) {\n    result = {}\n  } else if (typeof result === 'string') {\n    result = { message: result }\n  }\n\n  const { path, branch } = context\n  const { type } = struct\n  const {\n    refinement,\n    message = `Expected a value of type \\`${type}\\`${\n      refinement ? ` with refinement \\`${refinement}\\`` : ''\n    }, but received: \\`${print(value)}\\``,\n  } = result\n\n  return {\n    value,\n    type,\n    refinement,\n    key: path[path.length - 1],\n    path,\n    branch,\n    ...result,\n    message,\n  }\n}\n\n/**\n * Convert a validation result to an iterable of failures.\n */\n\nexport function* toFailures<T, S>(\n  result: Result,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): IterableIterator<Failure> {\n  if (!isIterable(result)) {\n    result = [result]\n  }\n\n  for (const r of result) {\n    const failure = toFailure(r, context, struct, value)\n\n    if (failure) {\n      yield failure\n    }\n  }\n}\n\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\n\nexport function* run<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    path?: any[]\n    branch?: any[]\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): IterableIterator<[Failure, undefined] | [undefined, T]> {\n  const { path = [], branch = [value], coerce = false, mask = false } = options\n  const ctx: Context = { path, branch }\n\n  if (coerce) {\n    value = struct.coercer(value, ctx)\n\n    if (\n      mask &&\n      struct.type !== 'type' &&\n      isObject(struct.schema) &&\n      isObject(value) &&\n      !Array.isArray(value)\n    ) {\n      for (const key in value) {\n        if (struct.schema[key] === undefined) {\n          delete value[key]\n        }\n      }\n    }\n  }\n\n  let valid = true\n\n  for (const failure of struct.validator(value, ctx)) {\n    valid = false\n    yield [failure, undefined]\n  }\n\n  for (let [k, v, s] of struct.entries(value, ctx)) {\n    const ts = run(v, s as Struct, {\n      path: k === undefined ? path : [...path, k],\n      branch: k === undefined ? branch : [...branch, v],\n      coerce,\n      mask,\n    })\n\n    for (const t of ts) {\n      if (t[0]) {\n        valid = false\n        yield [t[0], undefined]\n      } else if (coerce) {\n        v = t[1]\n\n        if (k === undefined) {\n          value = v\n        } else if (value instanceof Map) {\n          value.set(k, v)\n        } else if (value instanceof Set) {\n          value.add(v)\n        } else if (isObject(value)) {\n          value[k] = v\n        }\n      }\n    }\n  }\n\n  if (valid) {\n    for (const failure of struct.refiner(value as T, ctx)) {\n      valid = false\n      yield [failure, undefined]\n    }\n  }\n\n  if (valid) {\n    yield [undefined, value as T]\n  }\n}\n\n/**\n * Assign properties from one type to another, overwriting existing.\n */\n\nexport type Assign<T, U> = Simplify<U & Omit<T, keyof U>>\n\n/**\n * A schema for enum structs.\n */\n\nexport type EnumSchema<T extends string | number> = { [K in T]: K }\n\n/**\n * Check if a type is an exact match.\n */\n\nexport type IsMatch<T, G> = T extends G ? (G extends T ? T : never) : never\n\n/**\n * Check if a type is a record type.\n */\n\nexport type IsRecord<T> = T extends object\n  ? string extends keyof T\n    ? T\n    : never\n  : never\n/**\n * Check if a type is a tuple.\n */\n\nexport type IsTuple<T> = T extends [any]\n  ? T\n  : T extends [any, any]\n  ? T\n  : T extends [any, any, any]\n  ? T\n  : T extends [any, any, any, any]\n  ? T\n  : T extends [any, any, any, any, any]\n  ? T\n  : never\n\n/**\n * Check if a type is a union.\n */\n\nexport type IsUnion<T, U extends T = T> = (\n  T extends any ? (U extends T ? false : true) : false\n) extends false\n  ? never\n  : T\n\n/**\n * A schema for object structs.\n */\n\nexport type ObjectSchema = Record<string, Struct<any, any>>\n\n/**\n * Infer a type from an object struct schema.\n */\n\nexport type ObjectType<S extends ObjectSchema> = Simplify<\n  Optionalize<{ [K in keyof S]: Infer<S[K]> }>\n>\n\n/**\n * Omit properties from a type that extend from a specific type.\n */\n\nexport type OmitBy<T, V> = Omit<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Normalize properties of a type that allow `undefined` to make them optional.\n */\n\nexport type Optionalize<S extends object> = OmitBy<S, undefined> &\n  Partial<PickBy<S, undefined>>\n\n/**\n * Transform an object schema type to represent a partial.\n */\n\nexport type PartialObjectSchema<S extends ObjectSchema> = {\n  [K in keyof S]: Struct<Infer<S[K]> | undefined>\n}\n\n/**\n * Pick properties from a type that extend from a specific type.\n */\n\nexport type PickBy<T, V> = Pick<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Simplifies a type definition to its most basic representation.\n */\n\nexport type Simplify<T> = T extends any[] | Date\n  ? T\n  : { [K in keyof T]: T[K] } & {}\n\nexport type If<B extends Boolean, Then, Else> = B extends true ? Then : Else\n\n/**\n * A schema for any type of struct.\n */\n\nexport type StructSchema<T> = [T] extends [string]\n  ? [T] extends [IsMatch<T, string>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [number]\n  ? [T] extends [IsMatch<T, number>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [boolean]\n  ? [T] extends [IsMatch<T, boolean>]\n    ? null\n    : T\n  : T extends\n      | bigint\n      | symbol\n      | undefined\n      | null\n      | Function\n      | Date\n      | Error\n      | RegExp\n      | Map<any, any>\n      | WeakMap<any, any>\n      | Set<any>\n      | WeakSet<any>\n      | Promise<any>\n  ? null\n  : T extends Array<infer E>\n  ? T extends IsTuple<T>\n    ? null\n    : Struct<E>\n  : T extends object\n  ? T extends IsRecord<T>\n    ? null\n    : { [K in keyof T]: Describe<T[K]> }\n  : null\n\n/**\n * A schema for tuple structs.\n */\n\nexport type TupleSchema<T> = { [K in keyof T]: Struct<T[K]> }\n","/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\nexport type Failure = {\n  value: any\n  key: any\n  type: string\n  refinement: string | undefined\n  message: string\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\n\nexport class StructError extends TypeError {\n  value: any\n  key!: any\n  type!: string\n  refinement!: string | undefined\n  path!: Array<any>\n  branch!: Array<any>\n  failures: () => Array<Failure>;\n  [x: string]: any\n\n  constructor(failure: Failure, failures: () => Generator<Failure>) {\n    let cached: Array<Failure> | undefined\n    const { message, ...rest } = failure\n    const { path } = failure\n    const msg =\n      path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`\n    super(msg)\n    Object.assign(this, rest)\n    this.name = this.constructor.name\n    this.failures = () => {\n      return (cached ??= [failure, ...failures()])\n    }\n  }\n}\n","import { toFailures, shiftIterator, StructSchema, run } from './utils'\nimport { StructError, Failure } from './error'\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\nexport class Struct<T = unknown, S = unknown> {\n  readonly TYPE!: T\n  type: string\n  schema: S\n  coercer: (value: unknown, context: Context) => unknown\n  validator: (value: unknown, context: Context) => Iterable<Failure>\n  refiner: (value: T, context: Context) => Iterable<Failure>\n  entries: (\n    value: unknown,\n    context: Context\n  ) => Iterable<[string | number, unknown, Struct<any> | Struct<never>]>\n\n  constructor(props: {\n    type: string\n    schema: S\n    coercer?: Coercer\n    validator?: Validator\n    refiner?: Refiner<T>\n    entries?: Struct<T, S>['entries']\n  }) {\n    const {\n      type,\n      schema,\n      validator,\n      refiner,\n      coercer = (value: unknown) => value,\n      entries = function* () {},\n    } = props\n\n    this.type = type\n    this.schema = schema\n    this.entries = entries\n    this.coercer = coercer\n\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.validator = () => []\n    }\n\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.refiner = () => []\n    }\n  }\n\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n  assert(value: unknown): asserts value is T {\n    return assert(value, this)\n  }\n\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n\n  create(value: unknown): T {\n    return create(value, this)\n  }\n\n  /**\n   * Check if a value passes the struct's validation.\n   */\n\n  is(value: unknown): value is T {\n    return is(value, this)\n  }\n\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema.\n   */\n\n  mask(value: unknown): T {\n    return mask(value, this)\n  }\n\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `withCoercion` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful.\n   */\n\n  validate(\n    value: unknown,\n    options: {\n      coerce?: boolean\n    } = {}\n  ): [StructError, undefined] | [undefined, T] {\n    return validate(value, this, options)\n  }\n}\n\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\nexport function assert<T, S>(\n  value: unknown,\n  struct: Struct<T, S>\n): asserts value is T {\n  const result = validate(value, struct)\n\n  if (result[0]) {\n    throw result[0]\n  }\n}\n\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\nexport function create<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\nexport function mask<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true, mask: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Check if a value passes a struct.\n */\n\nexport function is<T, S>(value: unknown, struct: Struct<T, S>): value is T {\n  const result = validate(value, struct)\n  return !result[0]\n}\n\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\nexport function validate<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): [StructError, undefined] | [undefined, T] {\n  const tuples = run(value, struct, options)\n  const tuple = shiftIterator(tuples)!\n\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const t of tuples) {\n        if (t[0]) {\n          yield t[0]\n        }\n      }\n    })\n\n    return [error, undefined]\n  } else {\n    const v = tuple[1]\n    return [undefined, v]\n  }\n}\n\n/**\n * A `Context` contains information about the current location of the\n * validation inside the initial input value.\n */\n\nexport type Context = {\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * A type utility to extract the type from a `Struct` class.\n */\n\nexport type Infer<T extends Struct<any, any>> = T['TYPE']\n\n/**\n * A type utility to describe that a struct represents a TypeScript type.\n */\n\nexport type Describe<T> = Struct<T, StructSchema<T>>\n\n/**\n * A `Result` is returned from validation functions.\n */\n\nexport type Result =\n  | boolean\n  | string\n  | Partial<Failure>\n  | Iterable<boolean | string | Partial<Failure>>\n\n/**\n * A `Coercer` takes an unknown value and optionally coerces it.\n */\n\nexport type Coercer<T = unknown> = (value: T, context: Context) => unknown\n\n/**\n * A `Validator` takes an unknown value and validates it.\n */\n\nexport type Validator = (value: unknown, context: Context) => Result\n\n/**\n * A `Refiner` takes a value of a known type and validates it against a further\n * constraint.\n */\n\nexport type Refiner<T> = (value: T, context: Context) => Result\n","import { Struct, Context, Validator } from '../struct'\nimport { object, optional } from './types'\nimport { ObjectSchema, Assign, ObjectType, PartialObjectSchema } from '../utils'\n\n/**\n * Create a new struct that combines the properties properties from multiple\n * object structs.\n *\n * Like JavaScript's `Object.assign` utility.\n */\n\nexport function assign<A extends ObjectSchema, B extends ObjectSchema>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>\n): Struct<ObjectType<Assign<A, B>>, Assign<A, B>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>\n): Struct<ObjectType<Assign<Assign<A, B>, C>>, Assign<Assign<A, B>, C>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>\n): Struct<\n  ObjectType<Assign<Assign<Assign<A, B>, C>, D>>,\n  Assign<Assign<Assign<A, B>, C>, D>\n>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema,\n  E extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>,\n  E: Struct<ObjectType<E>, E>\n): Struct<\n  ObjectType<Assign<Assign<Assign<Assign<A, B>, C>, D>, E>>,\n  Assign<Assign<Assign<Assign<A, B>, C>, D>, E>\n>\nexport function assign(...Structs: Struct<any>[]): any {\n  const schemas = Structs.map((s) => s.schema)\n  const schema = Object.assign({}, ...schemas)\n  return object(schema)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n */\n\nexport function define<T>(name: string, validator: Validator): Struct<T, null> {\n  return new Struct({ type: name, schema: null, validator })\n}\n\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\n\nexport function deprecated<T>(\n  struct: Struct<T>,\n  log: (value: unknown, ctx: Context) => void\n): Struct<T> {\n  return new Struct({\n    ...struct,\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    validator(value, ctx) {\n      if (value === undefined) {\n        return true\n      } else {\n        log(value, ctx)\n        return struct.validator(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\n\nexport function dynamic<T>(\n  fn: (value: unknown, ctx: Context) => Struct<T, any>\n): Struct<T, null> {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n    *entries(value, ctx) {\n      const struct = fn(value, ctx)\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\n\nexport function lazy<T>(fn: () => Struct<T, any>): Struct<T, null> {\n  let struct: Struct<T, any> | undefined\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n    *entries(value, ctx) {\n      struct ??= fn()\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      struct ??= fn()\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      struct ??= fn()\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\n\nexport function omit<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Omit<S, K>>, Omit<S, K>> {\n  const { schema } = struct\n  const subschema: any = { ...schema }\n\n  for (const key of keys) {\n    delete subschema[key]\n  }\n\n  return object(subschema as Omit<S, K>)\n}\n\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\n\nexport function partial<S extends ObjectSchema>(\n  struct: Struct<ObjectType<S>, S> | S\n): Struct<ObjectType<PartialObjectSchema<S>>, PartialObjectSchema<S>> {\n  const schema: any =\n    struct instanceof Struct ? { ...struct.schema } : { ...struct }\n\n  for (const key in schema) {\n    schema[key] = optional(schema[key])\n  }\n\n  return object(schema) as any\n}\n\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\n\nexport function pick<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Pick<S, K>>, Pick<S, K>> {\n  const { schema } = struct\n  const subschema: any = {}\n\n  for (const key of keys) {\n    subschema[key] = schema[key]\n  }\n\n  return object(subschema as Pick<S, K>)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\n\nexport function struct<T>(name: string, validator: Validator): Struct<T, null> {\n  console.warn(\n    'superstruct@0.11 - The `struct` helper has been renamed to `define`.'\n  )\n\n  return define(name, validator)\n}\n","import { Infer, Struct } from '../struct'\nimport { define } from './utilities'\nimport {\n  TupleSchema,\n  ObjectSchema,\n  ObjectType,\n  print,\n  run,\n  isObject,\n} from '../utils'\n\n/**\n * Ensure that any value passes validation.\n */\n\nexport function any(): Struct<any, null> {\n  return define('any', () => true)\n}\n\n/**\n * Ensure that a value is an array and that its elements are of a specific type.\n *\n * Note: If you omit the element struct, the arrays elements will not be\n * iterated at all. This can be helpful for cases where performance is critical,\n * and it is preferred to using `array(any())`.\n */\n\nexport function array<T extends Struct<any>>(Element: T): Struct<Infer<T>[], T>\nexport function array(): Struct<unknown[], undefined>\nexport function array<T extends Struct<any>>(Element?: T): any {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [i, v] of value.entries()) {\n          yield [i, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array value, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a boolean.\n */\n\nexport function boolean(): Struct<boolean, null> {\n  return define('boolean', (value) => {\n    return typeof value === 'boolean'\n  })\n}\n\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\n\nexport function date(): Struct<Date, null> {\n  return define('date', (value) => {\n    return (\n      (value instanceof Date && !isNaN(value.getTime())) ||\n      `Expected a valid \\`Date\\` object, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is one of a set of potential values.\n *\n * Note: after creating the struct, you can access the definition of the\n * potential values as `struct.schema`.\n */\n\nexport function enums<T extends number>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends string>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends number | string>(values: readonly T[]): any {\n  const schema: any = {}\n  const description = values.map((v) => print(v)).join()\n\n  for (const key of values) {\n    schema[key] = key\n  }\n\n  return new Struct({\n    type: 'enums',\n    schema,\n    validator(value) {\n      return (\n        values.includes(value as any) ||\n        `Expected one of \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a function.\n */\n\nexport function func(): Struct<Function, null> {\n  return define('func', (value) => {\n    return (\n      typeof value === 'function' ||\n      `Expected a function, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an instance of a specific class.\n */\n\nexport function instance<T extends { new (...args: any): any }>(\n  Class: T\n): Struct<InstanceType<T>, null> {\n  return define('instance', (value) => {\n    return (\n      value instanceof Class ||\n      `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an integer.\n */\n\nexport function integer(): Struct<number, null> {\n  return define('integer', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value) && Number.isInteger(value)) ||\n      `Expected an integer, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value matches all of a set of types.\n */\n\nexport function intersection<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function intersection<A, B>(\n  Structs: TupleSchema<[A, B]>\n): Struct<A & B, null>\nexport function intersection<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A & B & C, null>\nexport function intersection<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A & B & C & D, null>\nexport function intersection<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A & B & C & D & E, null>\nexport function intersection<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A & B & C & D & E & F, null>\nexport function intersection<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A & B & C & D & E & F & G, null>\nexport function intersection<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A & B & C & D & E & F & G & H, null>\nexport function intersection<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A & B & C & D & E & F & G & H & I, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A & B & C & D & E & F & G & H & I & J, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q,\n  null\n>\nexport function intersection(Structs: Array<Struct<any, any>>): any {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n    *entries(value, ctx) {\n      for (const S of Structs) {\n        yield* S.entries(value, ctx)\n      }\n    },\n    *validator(value, ctx) {\n      for (const S of Structs) {\n        yield* S.validator(value, ctx)\n      }\n    },\n    *refiner(value, ctx) {\n      for (const S of Structs) {\n        yield* S.refiner(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Ensure that a value is an exact value, using `===` for comparison.\n */\n\nexport function literal<T extends boolean>(constant: T): Struct<T, T>\nexport function literal<T extends number>(constant: T): Struct<T, T>\nexport function literal<T extends string>(constant: T): Struct<T, T>\nexport function literal<T>(constant: T): Struct<T, null>\nexport function literal<T>(constant: T): any {\n  const description = print(constant)\n  const t = typeof constant\n  return new Struct({\n    type: 'literal',\n    schema:\n      t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n    validator(value) {\n      return (\n        value === constant ||\n        `Expected the literal \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `Map` object, and that its keys and values are of\n * specific types.\n */\n\nexport function map(): Struct<Map<unknown, unknown>, null>\nexport function map<K, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Map<K, V>, null>\nexport function map<K, V>(Key?: Struct<K>, Value?: Struct<V>): any {\n  return new Struct({\n    type: 'map',\n    schema: null,\n    *entries(value) {\n      if (Key && Value && value instanceof Map) {\n        for (const [k, v] of value.entries()) {\n          yield [k as string, k, Key]\n          yield [k as string, v, Value]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Map ? new Map(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Map ||\n        `Expected a \\`Map\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that no value ever passes validation.\n */\n\nexport function never(): Struct<never, null> {\n  return define('never', () => false)\n}\n\n/**\n * Augment an existing struct to allow `null` values.\n */\n\nexport function nullable<T, S>(struct: Struct<T, S>): Struct<T | null, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is a number.\n */\n\nexport function number(): Struct<number, null> {\n  return define('number', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value)) ||\n      `Expected a number, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an object, that is has a known set of properties,\n * and that its properties are of specific types.\n *\n * Note: Unrecognized properties will fail validation.\n */\n\nexport function object(): Struct<Record<string, unknown>, null>\nexport function object<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S>\nexport function object<S extends ObjectSchema>(schema?: S): any {\n  const knowns = schema ? Object.keys(schema) : []\n  const Never = never()\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n    *entries(value) {\n      if (schema && isObject(value)) {\n        const unknowns = new Set(Object.keys(value))\n\n        for (const key of knowns) {\n          unknowns.delete(key)\n          yield [key, value[key], schema[key]]\n        }\n\n        for (const key of unknowns) {\n          yield [key, value[key], Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n    coercer(value) {\n      return isObject(value) ? { ...value } : value\n    },\n  })\n}\n\n/**\n * Augment a struct to allow `undefined` values.\n */\n\nexport function optional<T, S>(struct: Struct<T, S>): Struct<T | undefined, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) =>\n      value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\n\nexport function record<K extends string, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Record<K, V>, null> {\n  return new Struct({\n    type: 'record',\n    schema: null,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k in value) {\n          const v = value[k]\n          yield [k, k, Key]\n          yield [k, v, Value]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\n\nexport function regexp(): Struct<RegExp, null> {\n  return define('regexp', (value) => {\n    return value instanceof RegExp\n  })\n}\n\n/**\n * Ensure that a value is a `Set` object, and that its elements are of a\n * specific type.\n */\n\nexport function set(): Struct<Set<unknown>, null>\nexport function set<T>(Element: Struct<T>): Struct<Set<T>, null>\nexport function set<T>(Element?: Struct<T>): any {\n  return new Struct({\n    type: 'set',\n    schema: null,\n    *entries(value) {\n      if (Element && value instanceof Set) {\n        for (const v of value) {\n          yield [v as string, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Set ? new Set(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Set ||\n        `Expected a \\`Set\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a string.\n */\n\nexport function string(): Struct<string, null> {\n  return define('string', (value) => {\n    return (\n      typeof value === 'string' ||\n      `Expected a string, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\n\nexport function tuple<A>(Structs: TupleSchema<[A]>): Struct<[A], null>\nexport function tuple<A, B>(Structs: TupleSchema<[A, B]>): Struct<[A, B], null>\nexport function tuple<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<[A, B, C], null>\nexport function tuple<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<[A, B, C, D], null>\nexport function tuple<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<[A, B, C, D, E], null>\nexport function tuple<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<[A, B, C, D, E, F], null>\nexport function tuple<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<[A, B, C, D, E, F, G], null>\nexport function tuple<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<[A, B, C, D, E, F, G, H], null>\nexport function tuple<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<[A, B, C, D, E, F, G, H, I], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<[A, B, C, D, E, F, G, H, I, J], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q], null>\nexport function tuple(Elements: Struct<any>[]): any {\n  const Never = never()\n\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n    *entries(value) {\n      if (Array.isArray(value)) {\n        const length = Math.max(Elements.length, value.length)\n\n        for (let i = 0; i < length; i++) {\n          yield [i, value[i], Elements[i] || Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\nexport function type<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S> {\n  const keys = Object.keys(schema)\n  return new Struct({\n    type: 'type',\n    schema,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k of keys) {\n          yield [k, value[k], schema[k]]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value matches one of a set of types.\n */\n\nexport function union<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function union<A, B>(Structs: TupleSchema<[A, B]>): Struct<A | B, null>\nexport function union<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A | B | C, null>\nexport function union<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A | B | C | D, null>\nexport function union<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A | B | C | D | E, null>\nexport function union<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A | B | C | D | E | F, null>\nexport function union<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A | B | C | D | E | F | G, null>\nexport function union<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A | B | C | D | E | F | G | H, null>\nexport function union<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A | B | C | D | E | F | G | H | I, null>\nexport function union<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A | B | C | D | E | F | G | H | I | J, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q,\n  null\n>\nexport function union(Structs: Struct<any>[]): any {\n  const description = Structs.map((s) => s.type).join(' | ')\n  return new Struct({\n    type: 'union',\n    schema: null,\n    validator(value, ctx) {\n      const failures = []\n\n      for (const S of Structs) {\n        const [...tuples] = run(value, S, ctx)\n        const [first] = tuples\n\n        if (!first[0]) {\n          return []\n        } else {\n          for (const [failure] of tuples) {\n            if (failure) {\n              failures.push(failure)\n            }\n          }\n        }\n      }\n\n      return [\n        `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(\n          value\n        )}`,\n        ...failures,\n      ]\n    },\n  })\n}\n\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\nexport function unknown(): Struct<unknown, null> {\n  return define('unknown', () => true)\n}\n","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}","import { Struct, is, Coercer } from '../struct'\nimport { isPlainObject } from '../utils'\nimport { string, unknown } from './types'\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function coerce<T, S, C>(\n  struct: Struct<T, S>,\n  condition: Struct<C, any>,\n  coercer: Coercer<C>\n): Struct<T, S> {\n  return new Struct({\n    ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition)\n        ? struct.coercer(coercer(value, ctx), ctx)\n        : struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function defaulted<T, S>(\n  struct: Struct<T, S>,\n  fallback: any,\n  options: {\n    strict?: boolean\n  } = {}\n): Struct<T, S> {\n  return coerce(struct, unknown(), (x) => {\n    const f = typeof fallback === 'function' ? fallback() : fallback\n\n    if (x === undefined) {\n      return f\n    }\n\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      const ret = { ...x }\n      let changed = false\n\n      for (const key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key]\n          changed = true\n        }\n      }\n\n      if (changed) {\n        return ret\n      }\n    }\n\n    return x\n  })\n}\n\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function trimmed<T, S>(struct: Struct<T, S>): Struct<T, S> {\n  return coerce(struct, string(), (x) => x.trim())\n}\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n"],"names":["_Buffer","require","module","exports","ALPHABET","length","TypeError","BASE_MAP","Uint8Array","j","i","x","charAt","xc","charCodeAt","BASE","LEADER","FACTOR","Math","log","iFACTOR","decodeUnsafe","source","alloc","psz","zeroes","size","b256","carry","it3","Error","it4","vch","allocUnsafe","fill","encode","Array","isArray","from","isBuffer","pbegin","pend","b58","it1","it2","str","repeat","decode","string","buffer","buf","reversed","Buffer","reverse","hex","toString","BigInt","num","width","padStart","slice","basex","uuid","generateRequest","ClientBrowser","callServer","options","this","reviver","replacer","generator","version","notificationIdNull","prototype","request","method","params","id","callback","message","self","isBatch","undefined","hasCallback","err","JSON","stringify","response","_parseResponse","responseText","parse","isError","res","error","filter","result","jsonrpc","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread2","target","arguments","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","_objectWithoutProperties","excluded","sourceKeys","indexOf","sourceSymbolKeys","propertyIsEnumerable","call","toFailures","run","StructError","constructor","failure","failures","cached","rest","path","msg","join","assign","name","isObject","print","value","shiftIterator","input","next","done","toFailure","context","struct","branch","type","refinement","Symbol","iterator","r","coerce","mask","ctx","coercer","schema","valid","validator","entries","k","v","s","ts","t","Map","set","Set","add","refiner","Struct","props","assert","validate","create","is","tuples","tuple","f","define","any","array","Element","boolean","instance","Class","literal","constant","description","never","nullable","number","isNaN","optional","record","Key","Value","Elements","Never","max","union","Structs","map","arr","arrayWithHoles","iterableToArray","unsupportedIterableToArray","nonIterableRest","unknown","condition","inRange","a","min","ToDictionary","o","Stream","tokens","endOfStream","read","shift","prepend","token","unshift","pop","finished","decoderError","fatal","opt_code_point","DEFAULT_ENCODING","TextDecoder","encoding","String","toLowerCase","_streaming","_BOMseen","_decoder","_fatal","Boolean","_ignoreBOM","TextEncoder","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","handler","stream","bite","code_point","UTF8Encoder","count","offset","bytes","temp","ArrayBuffer","byteOffset","byteLength","input_stream","code_points","cp","fromCharCode","codePointsToString","opt_string","n","u","c","d","b","stringToCodePoints"],"sourceRoot":""}